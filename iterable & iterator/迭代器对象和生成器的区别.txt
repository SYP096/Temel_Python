虽然迭代器对象和生成器有一些相似之处，但它们之间仍然存在一些差别。以下是它们之间的主要区别：

1，实现方式： 迭代器对象和生成器的实现方式不同。

迭代器对象通常需要实现 __iter__ 和 __next__ 方法，而生成器使用 yield 语句来实现。
迭代器对象可以通过编写类来实现，而生成器则通常使用函数来实现。

-------------------------------------
2，惰性计算：两个都是惰性计算。

生成器是一种惰性计算的方式，只有在需要时才会生成值。
而迭代器对象可以是惰性计算的，也可以是非惰性计算的。

-------------------------------------
3，可迭代性：迭代器对象和生成器都可以用于迭代操作，但它们的可迭代性质不同。

迭代器对象可以是任何实现了 __iter__ 和 __next__ 方法的对象，而生成器是一种特殊类型的迭代器，使用 yield 语句来生成值。

--------------------------------------
4，资源占用：生成器在生成序列时可以节省内存，因为它只会在需要时生成值。
而迭代器对象通常需要在内存中保存所有的值，因此在处理大量数据时可能会占用更多的资源。

-------------------------------------
5，灵活性：生成器相对于迭代器对象来说更加灵活，因为它可以暂停和恢复执行。
生成器可以在任何时候中断执行，并在需要时恢复执行，从而可以用于处理更加复杂的逻辑和算法。

总之，虽然迭代器对象和生成器有一些相似之处，但它们还是有一些明显的区别。
生成器是一种特殊类型的迭代器，使用 yield 语句来生成序列，并且具有惰性计算和灵活性的特点；

而迭代器对象可以是任何实现了 __iter__ 和 __next__ 方法的对象，通常需要在内存中保存所有的值，
并且可迭代性质比生成器更加广泛。

看这个文件夹中两个demo，可以看到iterator占用的内存比generator要少很多， 但是generator要比iterator快一点